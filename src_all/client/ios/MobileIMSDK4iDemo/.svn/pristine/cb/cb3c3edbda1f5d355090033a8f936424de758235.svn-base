//  ----------------------------------------------------------------------
//  Copyright (C) 2015 Jack Jiang The MobileIMSDK Project.
//  All rights reserved.
//  Project URL:  https://github.com/JackJiang2011/MobileIMSDK
//
//  openmob.net PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
//
//  You can contact author with jack.jiang@openmob.net or jb2011@163.com.
//  ----------------------------------------------------------------------
//
//  DataFactoryC.h
//  MobileIMSDK4i
//
//  Created by JackJiang on 14/10/23.
//  Copyright (c) 2014年 openmob.net. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "Protocal.h"
#import "PLoginInfoResponse.h"
#import "PErrorResponse.h"

/*!
 * 用于构造一系列MobileIMSDK框架级通信协议的工厂类。
 *
 * @author Jack Jiang,2014-10-29
 * @version 1.0
 * @since 2.1
 */
@interface DataFactoryC : NSObject

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - 协议解析相关方法
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*!
 * 将JSON转换而来的byte数组反序列化成指定类的对象.
 *
 * @param fullProtocalJASOnBytes JSON转换而来的byte数组
 * @param clazz 类
 * @return 如果返回列化成功则返回对象，否则返回nil
 */
+ (id) parse:(NSData *)fullProtocalJASOnBytes withClass:(Class)clazz;

/*!
 * 将指定的JSON字符串反序列化成指定类的对象.
 *
 * @param dataContentJSONOfProtocal json字符串
 * @param clazz 类
 * @return 如果返回列化成功则返回对象，否则返回nil
 *
 */
+ (id) parseObject:(NSString *)dataContentJSONOfProtocal withClass:(Class)clazz;

/*!
 * 接收用户登陆响应消息对象（该对象由客户端接收）.
 *
 * @param dataContentOfProtocal
 * @return
 */
+ (PLoginInfoResponse *) parsePLoginInfoResponse:(NSString *)dataContentOfProtocal;

/*!
 * 解析错误响应消息对象（该对象由客户端接收）.
 *
 * @param dataContentOfProtocal
 * @return
 */
+ (PErrorResponse *) parsePErrorResponse:(NSString *) dataContentOfProtocal;


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#pragma mark - 协议组装相关方法
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*!
 * 创建用户注消登陆消息对象（该对象由客户端发出）.
 *
 * @param user_id
 * @param loginName
 * @return
 */
+ (Protocal *) createPLoginoutInfo:(int) user_id withLoginName:(NSString *)loginName;

/*!
 * 创建用户登陆消息对象（该对象由客户端发出）.
 *
 * @param loginName
 * @param loginPsw
 * @return
 */
+ (Protocal *) createPLoginInfo:(NSString *)loginName withPsw:(NSString *)loginPsw;

/*!
 * 创建用户心跳包对象（该对象由客户端发出）.
 *
 * @param from_user_id
 * @return
 */
+ (Protocal *) createPKeepAlive:(int)from_user_id;

+ (Protocal *) createCommonData:(NSString *)dataContent fromUserId:(int)from_user_id toUserId:(int)to_user_id
                            qos:(BOOL)QoS fp:(NSString *)fingerPrint;
+ (Protocal *) createCommonData:(NSString *)dataContent fromUserId:(int)from_user_id toUserId:(int)to_user_id;

/*!
 * 客户端from_user_id向to_user_id发送一个QoS机制中需要的“收到消息应答包”.
 *
 * @param from_user_id 发起方
 * @param to_user_id 接收方
 * @param recievedMessageFingerPrint 已收到的消息包指纹码
 * @return
 */
+ (Protocal *) createRecivedBack:(int)from_user_id toUserId:(int)to_user_id withFingerPrint:(NSString *)recievedMessageFingerPrint;

@end
